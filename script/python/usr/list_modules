#! /usr/bin/env python
# -*- coding: iso-8859-15  -*-
##############################################################################
#         Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
#         Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI
#
#          Distributed under the Boost Software License, Version 1.0
#                 See accompanying file LICENSE.txt or copy at
#                     http://www.boost.org/LICENSE_1_0.txt
##############################################################################
__author__    = "Lapreste Jean-thierry (lapreste@univ-bpclermont.fr)"
__version__   = "$Revision: 1.0 $"
__date__      = "$Date: 2010    $"
__copyright__ = """ Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
                    Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI"""
__license__   = "Boost Software License, Version 1.0"

"""Allow to create  cpp unit test files for module functors
   from the data contained in py dictionnary files
   related to the functor
   """

import sys
import os
import re
import argparse

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_basics"))
from nt2_modules        import Nt2_modules
sys.path.pop(0)

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_generation"))
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"utils"))
from unit_creation     import Create_tests
from files_utils       import exist
sys.path.pop(0)
sys.path.pop(0)

def listify(data) :
    if data is None : return data
    data = re.sub('\s|"|\[|\]','',data)
    data = re.sub("'",'',data)
    return data.split(',')


def showoptions(namespace):
    d = namespace.__dict__
    print("""units_from_py was invoked with:
    modules name(s)                = <%(md_name)s>
    simd types               (-t)  = <%(simd_types)s>   
    functor list             (-f)  = <%(fct_list)s>
    modes                    (-m)  = <%(modes)s>
    all functors             (-a)  = <%(all_functors)s>
    show                     (-s)  = <%(show)s>
    write                    (-w)  = <%(write)s>
    backup on write          (-b)  = <%(backup)s>
    check  on write          (-c)  = <%(check)s>
    equally spaced values    (-e)  = <%(eq_sp_values)s>
    random values            (-r)  = <%(rd_values)s>
    peculiar values          (-p)  = <%(pe_values)s>
    options display          (-o)  = <%(options)s>
    """% d)
    print("""triggers -s -w -b -c -e -r -p and -o have a corresponding negation:
             -s -> -ns : --show -> --no_show
             etc.""")

def shownames(styles,roots) :
    if isinstance(roots, str) : roots = [roots]
    md_names = []
    for r in roots :
        print(r)
        md_names.extend(Nt2_modules().get_modules_list(styles,r))
    md_names = sorted(list(set(md_names)))
    for mdn in md_names : print("  %s"%mdn)

if __name__ == "__main__" :
    parser = argparse.ArgumentParser(description="list modules files names and locations")

    parser.add_argument("-st","--styles",
                      default="sys,usr,boost",
                      dest="styles",
                      help="""module styles to be listed
                      default is sys,usr,boost
                      """)
    parser.add_argument("-n", "--names",
                      dest="names",
                      action="store_true",
                      default=True,
                      help="""show modules names
                       This is the default.
                      """)
    parser.add_argument("-subs","--subsof",
                      default="*",
                      dest="subs",
                      help="""do we list all modules or only flat ones
                      or only submodules of a given non flatone
                      default is '*' for all modules "_" or 'none' means all flat
                      and th name (for example "boost") will show
                      submodules names
                      """)

##    namespace = parser.parse_args( "-st=sys,usr -subs=boost,*".split())
    namespace = parser.parse_args()

    styles       = listify(namespace.styles)
    names        = namespace.names
    subs         = listify(namespace.subs)
##    options      = namespace.options


    if (names) : shownames(styles,subs)
