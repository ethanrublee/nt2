#! /usr/bin/env python
# -*- coding: iso-8859-15  -*-
##############################################################################
#         Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
#         Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI
#
#          Distributed under the Boost Software License, Version 1.0
#                 See accompanying file LICENSE.txt or copy at
#                     http://www.boost.org/LICENSE_1_0.txt
##############################################################################
__author__    = "Lapreste Jean-thierry (lapreste@univ-bpclermont.fr)"
__version__   = "$Revision: 1.0 $"
__date__      = "$Date: 2010    $"
__copyright__ = """ Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
                    Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI"""
__license__   = "Boost Software License, Version 1.0"

"""Allow to create  cpp unit test files for module functors
   from the data contained in py dictionnary files
   related to the functor
   """

import sys
import os
import re
import argparse

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_basics"))
from nt2_modules        import Nt2_modules
from nt2_tb_props       import Nt2_tb_props 
sys.path.pop(0)

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_generation"))
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"utils"))
from unit_creation     import Create_tests
from files_utils       import exist, read, write
sys.path.pop(0)
sys.path.pop(0)

def get_py_list(p) :
    l = []
    for name in os.listdir(p) :
        if name[-3:]=='.py' :
            h = name
            l.append(h)
    return sorted(l)

def update(pytxt) :
    pytxt = re.sub('nt2::meta::','boost::dispatch::meta::',pytxt)
    pytxt = re.sub('nt2::'      ,'boost::simd::'    ,pytxt)
    return pytxt

def addboost(pyl) :
    indexes = []
    blanks = []
    for l in pyl :
        if re.match("(\s*)'module'\s*:\s*'boost'\s*$",l) :
            return pyl
    for i,l in enumerate(pyl) :
        m = re.match("(\s*)'functor'\s*:\s*{\s*$",l) 
        if m :    
            indexes.append(i)
            blanks.append(m.groups(0)[0])
    indexes.reverse()
    blanks.reverse()
    for j,i in enumerate(indexes)  : pyl.insert(i+1,blanks[j]+"    'module' : 'boost',")
    return pyl

if __name__ == "__main__" :

    ln = Nt2_modules().get_modules_list(['sys','usr'],'boost')
    for l in ln :
        if re.search('bitwise',l) :
            print(l)
            p =Nt2_tb_props(l).get_doc_path()
##        print(p)
            lpy = get_py_list(p)
            for py in lpy :
##            print(py)
                ppy = os.path.join(p,py)
                pyl = read(ppy)
                newpyl=addboost(pyl)
                pytxt = '\n'.join(newpyl)
                newpytxt = update(pytxt)
##            print(newpytxt)
                write(ppy,newpytxt,check=False,verbose=True)



